Shader "BasicShader"
{
	Properties
	{
		//the properties of your shaders
		// - textures
		// - colours
		// - parameters
		//
	}
	
	SubShader
	{
		
		struct v2f {
			float4 pos : SV_POSITION;	// Clip space
			float3 wPos : TEXCOORD1;	// World position
		};
 
		v2f vert (appdata_full v)
		{	
			v2f o;
			o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
			o.wPos = mul(_Object2World, v.vertex).xyz; 
			return o;
		}
		
		fixed4 frag (v2f i) : SV_TARGET
		{
			float3 worldPosition = i.wPos;
			float3  viewDirection = normalize(i.wPos - _WorldSpaceCameraPos);
			return raymarch(worldPosition,viewDirection);
		}
		
		fixed4 raymarch(float3 position, float3 direction)
		{
			for(int i = 0; i < STEPS; i++)
			{
				float distance = sphereDistance(position);
				if(distance < MIN_DISTANCE)
					return i / (float) STEPS; //red
					
				position += direction * STEP_SIZE;
			}
			
			return fixed4(0,0,0,1); //white
		}
		
		float sphereDistance(float3 p)
		{
			return distance(p,_Centre) - _Radius;
		}
		
		#include "Lighting.cginc"
		fixed4 simpleLambert(fixed3 normal){
			fixed3 lightDir = _WorldSpaceLightPos0.xyz; //light direction
			fixed3 lightCol = _LightColor0.rgb; //light color
			
			//specular
			//fixed3 h = (lightDir - viewDirection) / 2;
			//fixed s = pow(dot(normal, h), _SpecularPower) * _Gloss
			//c.rgb = _Color * lightCol * NdotL + s;
			//c.a = 1;
			
			fixed NdotL = max(dot(normal, lightDir), 0);
			fixed4 c;
			c.rgb = _Color * lightCol * NdotL;
			c.a = 1;
			return c;
		}
		
		float3 normal(float3 p)
		{
			const float eps = 0.01;
			
			return normalize
			(
				float3
				(
					map(p + float3(eps,0,0)) - map(p - float3(eps,0,0)),
					map(p + float3(0,eps,0)) - map(p - float3(0,eps,0)),
					map(p + float3(0,0,eps)) - map(p - float3(0,0,eps))
				)
			);
		}
		
		fixed4 renderSurface(float3 p)
		{
			float3 n=normal(p);
			return simpleLambert(n);
		}
		
		Tags
		{
		//"Queue" = "Geometry"
		//"RenderType" = "Opaque"
		}
		CGPROGRAM
		// Cg / HLSL code of the shader
		// ...
		ENDCG
	}
	
}